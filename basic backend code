from PIL import Image
from ultralytics import YOLO
import os


yolo_model = YOLO("../yolov8n.pt")

def detect_person(image_path: str) -> int:
    """Detect the number of people in an image using YOLO."""
    results = yolo_model(image_path)
    # Filter detections for 'person' class (class index 0 in COCO)
    person_detections = [det for det in results[0].boxes.data if int(det[5]) == 0]
    return len(person_detections)


def upload_file(file_path):
    """Simulates file upload and processes the image."""
    if not os.path.exists(file_path):
        return {'error': 'File not found'}

        # Detect the number of people in the image
    num_people = detect_person(file_path)
    if num_people != 1:
        print("error: Image must contain exactly one person.")


    else:
        print("Proceed with cloth selection.")



def generate_viton_image(person_image_path, cloth):
    """Simulates VITON image generation."""
    try:
        # Check if person image exists
        if not os.path.exists(person_image_path):
            return {'error': 'Person image not found'}

        # Load person image
        person_image = Image.open(person_image_path)

        # Simulate output generation
        RESULT_FOLDER = "results"
        os.makedirs(RESULT_FOLDER, exist_ok=True)
        output_path = os.path.join(RESULT_FOLDER, "output.jpg")
        person_image.save(output_path)

        return {"output_path": output_path, "message": "Image processed successfully."}
    except Exception as e:
        return {'error': str(e)}


def download_file(filename, destination_folder):
    """Simulates file download to local storage device."""
    RESULT_FOLDER = "results"
    file_path = os.path.join(RESULT_FOLDER, filename)

    if os.path.exists(file_path):
        os.makedirs(destination_folder, exist_ok=True)
        destination_path = os.path.join(destination_folder, filename)
        with open(file_path, 'rb') as src, open(destination_path, 'wb') as dst:
            dst.write(src.read())
        return {"file_path": destination_path, "message": "File downloaded successfully to local storage."}
    return {'error': 'File not found'}
